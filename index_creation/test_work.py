import chromadb
from chromadb.config import Settings
from chromadb.utils import embedding_functions
from sentence_transformers import SentenceTransformer
from typing import List, Dict, Any, Optional
import time
import json
from pathlib import Path

class ChromaDBSearcher:
    def __init__(self, 
                 persist_directory: str = "./vector_index",
                 embedding_model_name: str = "sentence-transformers/all-MiniLM-L6-v2",
                 collection_name: str = "knowledge_base"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ ChromaDB
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - persist_directory: –ø–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        - embedding_model_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        - collection_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        """
        self.persist_directory = persist_directory
        self.collection_name = collection_name
        
        self.embedding_model = SentenceTransformer(embedding_model_name)
        self.embedding_size = self.embedding_model.get_sentence_embedding_dimension()
        
        self.client = chromadb.PersistentClient(path=self.persist_directory)
        self.collection = self._get_or_create_collection()
        
        print(f"ChromaDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"–ú–æ–¥–µ–ª—å: {embedding_model_name}")
        print(f"–†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {self.embedding_size}")
        print(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {collection_name}")
    
    def _get_or_create_collection(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        try:
            collection = self.client.get_collection(self.collection_name)
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
            return collection
        except ValueError:
            print(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {self.collection_name}")
            return self.client.create_collection(
                name=self.collection_name,
            )
    
    def search(self, 
               query: str, 
               n_results: int = 5,
               where: Dict = None,
               where_document: Dict = None) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ ChromaDB
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - query: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        - n_results: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        - where: —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        - where_document: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
        """
        query_embedding = self.embedding_model.encode([query]).tolist()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        results = self.collection.query(
            query_embeddings=query_embedding,
            n_results=n_results,
            where=where,
            where_document=where_document,
            include=["documents", "metadatas", "distances"]
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        formatted_results = []
        for i in range(len(results['documents'][0])):
            formatted_results.append({
                'id': results['ids'][0][i],
                'document': results['documents'][0][i],
                'metadata': results['metadatas'][0][i],
                'distance': results['distances'][0][i],
                'score': 1 - results['distances'][0][i]  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ score
            })
        
        return formatted_results
    
    def get_collection_info(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        count = self.collection.count()
        return {
            "collection_name": self.collection_name,
            "document_count": count,
            "embedding_dimension": self.embedding_size,
            "persist_directory": self.persist_directory
        }


def interactive_search():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞"""
    
    chroma_searcher = ChromaDBSearcher()
    
    print("üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ ChromaDB")
    print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    
    while True:
        try:
            query = input("\n–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
            
            if query.lower() in ['quit', 'exit', 'q']:
                break
            
            if not query:
                continue
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            start_time = time.time()
            results = chroma_searcher.search(query, n_results=5)
            search_time = time.time() - start_time
            
            print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)} (–≤—Ä–µ–º—è: {search_time:.3f}—Å)")
            print("=" * 80)
            
            for i, result in enumerate(results, 1):
                print(f"{i}. üìÑ {result['metadata'].get('source', 'Unknown')}")
                print(f"   ‚≠ê Score: {result['score']:.3f}")
                print(f"   üìù {result['document'][:200]}...")
                print(f"   üìä Metadata: {result['metadata']}")
                print()
                
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

if __name__ == "__main__": 
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    interactive_search()